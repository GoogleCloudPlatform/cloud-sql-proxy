# google-cloud-sql-proxy
#
# A MySQL proxy service provided by Google
#
# This upstart script expects the binary under /usr/local/bin/google-cloud-sql-proxy
# It will create the sockets at /var/run/cloudsql
# You can name CloudSQL instances via the compute instance metadata attribute name "cloud-sql-proxy-instances" - if you do not, all CloudSQL instances will be made available
#
# This upstart script uses named pipes to allow logging stdout and stderr to syslog via logger

author "fogs@users.noreply.github.com"
description "Google Cloud SQL Proxy"

start on runlevel [2345]
stop on runlevel [!2345]

respawn
respawn limit 10 5
umask 022

pre-start script
    test -d /var/run/cloudsql || mkdir -p -m0755 /var/run/cloudsql
    logger -is -t "$UPSTART_JOB" "pre-start script completed"
end script

post-stop script
    logger -is -t "$UPSTART_JOB" "post-stop script completed"
end script

script
  # Create named pipe to log stdout into, to read those messages back to syslog via logger
  # The pipe is removed after the file pointer is opened, leaving no trash behind, yet working
  mkfifo /tmp/$UPSTART_JOB-stdout-fifo
  ( logger -t $UPSTART_JOB --priority user.notice </tmp/$UPSTART_JOB-stdout-fifo & )
  exec >/tmp/$UPSTART_JOB-stdout-fifo
  rm /tmp/$UPSTART_JOB-stdout-fifo

  # Same named pipe method here, but for stderr, allowing to log with a different severity than stdout
  mkfifo /tmp/$UPSTART_JOB-stderr-fifo
  ( logger -t $UPSTART_JOB --priority user.alert </tmp/$UPSTART_JOB-stderr-fifo & )
  exec 2>/tmp/$UPSTART_JOB-stderr-fifo
  rm /tmp/$UPSTART_JOB-stderr-fifo

  # start the actual proxy binary
  exec /usr/local/bin/google-cloud-sql-proxy -dir=/var/run/cloudsql -instances_metadata=instance/attributes/cloud-sql-proxy-instances
end script
